#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<unistd.h>
#include<pthread.h>
#include<sys/types.h>
#define MIN_PID 100
#define MAX_PID 1000



int bit_map[MAX_PID-MIN_PID]={0};
int allocate_map()
{
for(int i=0; i< MAX_PID;i++)
bit_map[i]=0;
}

int allocate_pid(void){
    int i,flag=1;
    for(i=0; i<MAX_PID-MIN_PID; i++){
        if(bit_map[i]==0){
           
            bit_map[i]=1;
	        printf("ALLOCATED MEMORY SUCESSFULLY\n");
            flag=0;
            break;
        }
    }
    return flag?-1:i;
}
void release_pid(int id){
    bit_map[id]=0;
}
void *threading(void *az){
    int tid =  *(( int* )az);
    
    
    int id = allocate_pid();


    if(id==-1){
        printf("No PID available.");
    }
    else{
        printf("Thread/Process  %d is allocated with PID %d \n",tid,id+MIN_PID);
        
        
        
        sleep(10);

        printf("Thread/Process (%d) PID (%3d) Released after %d sec\n",tid,id+MIN_PID,10);
        release_pid(id);
       
    }
    printf("released PID  is assign to new thread/Process  (%d)\n");
    pthread_exit(NULL);
    
} 

int main(){
	printf(">>>>>>>>>>>>>>>>>>>>>>WELCOME TO PID MANAGER>>>>>>>>>>>>>>\n");
	allocate_pid();

      int num;
    printf("<<<<<<<<<<<<<<<<<<<<<<<ENTER YOUR CHOICE>>>>>>>>>>>>>>>>>>>>\n");
    printf("1) FOR PROCESS CREATION \n");
    printf("2) FOR THREAD  CREATION \n");
    
    scanf("%d",&num);
    switch(num)
    {
    	case 1:
    		printf("<<ITS PROCESS CREATION SECTION\n");
    		break;
    	case 2:
    		printf("<<ITS THREAD CREATION SECTION \n");
    		
	
    int i;
    int NO_OF_Processes;
    printf("enter the no of processes/threads \n");
    scanf("%d",&NO_OF_Processes);
    
    pthread_t process[NO_OF_Processes];
    srand(time(NULL));
    for(i=0; i<NO_OF_Processes; i++){
        if(pthread_create(&process[i],NULL,threading,(void*)&i))
            return -1*printf("Error in thread %d !!!\n",i);
    }

    for(i=0; i<NO_OF_Processes; i++)
        pthread_join(process[i],NULL);
    
    return 0*printf("\n************SUCCESSFUL EXIT*************\n");
    break;
}
}
